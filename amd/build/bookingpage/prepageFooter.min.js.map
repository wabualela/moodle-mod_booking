{"version":3,"file":"prepageFooter.min.js","sources":["../../src/bookingpage/prepageFooter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookingpage/prepageFooter\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport jQuery from 'jquery';\nimport {continueToNextPage, backToPreviousPage, setBackModalVariables} from 'mod_booking/bookit';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\n\nvar SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INLINEID: 'sbPrePageInline_',\n    INMODALDIV: ' div.modalMainContent',\n    INMODALFOOTER: ' div.prepage-booking-footer',\n    INMODALBUTTON: 'div.in-modal-button',\n    BOOKITBUTTON: 'div.booking-button-area',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/* Const WAITTIME = 1500;*/\n\n/**\n * Add the click listener to a prepage modal button.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {boolean} shoppingcartisinstalled\n */\nexport function initFooterButtons(optionid, userid, shoppingcartisinstalled) {\n\n    // eslint-disable-next-line no-console\n    console.log('initFooterButtons', optionid);\n\n    // We need to find out if we are in modal or inline mode.\n     // First, get all link elements in the footer.\n     let elements = document.querySelectorAll('[id^=\"' + SELECTORS.INLINEID + optionid + '_\"] ' + SELECTORS.INMODALFOOTER + \" a\");\n\n     if (elements.length === 0) {\n         elements = document.querySelectorAll('[id^=\"' + SELECTORS.MODALID + optionid + '_\"] ' + SELECTORS.INMODALFOOTER + \" a\");\n\n         // Everytime we close the modal, we want to reset to the first prepage.\n        jQuery.each(jQuery('[id^=\"' + SELECTORS.MODALID + optionid + '_\"]'), function() {\n            jQuery(this).on(\"hide.bs.modal\", function() {\n                setBackModalVariables(optionid);\n            });\n        });\n     }\n\n    // This would be linked to automatic forwarding, which we don't use at the moment.\n    // initBookingButton(optionid);\n\n    // eslint-disable-next-line no-console\n    console.log('buttons found', elements);\n\n    elements.forEach(async element => {\n        if (element && !element.dataset.initialized) {\n\n            // Make sure we dont initialize this twice.\n            element.dataset.initialized = true;\n\n            const action = element.dataset.action;\n\n            // eslint-disable-next-line no-console\n            console.log(element, action);\n\n            // We might to execute some actions right away.\n\n            switch (action) {\n                // If we find the checkout button, we reload shopping cart.\n                case 'closeinline':\n                case 'continuepost':\n                case 'checkout':\n                    // eslint-disable-next-line no-console\n                    console.log('closeinline', action);\n                    if (shoppingcartisinstalled) {\n                        import('local_shopping_cart/cart')\n                        .then(cart => {\n                            // eslint-disable-next-line no-console\n                            console.log(cart);\n\n                            const oncashier = window.location.href.indexOf(\"cashier.php\");\n                            // If we are not on cashier, we can just redirect.\n                            if (oncashier > 0) {\n                                cart.reinit(-1);\n                            } else {\n                                cart.reinit();\n                            }\n                            return;\n                        })\n                        .catch(() => {\n                            // eslint-disable-next-line no-console\n                            console.log('local_shopping_cart/cart could not be loaded');\n                        });\n                    }\n                    listenToCloseInline();\n                break;\n            }\n\n            // Depending on the action button, we add the right listener.\n            element.addEventListener('click', () => {\n\n                if (element.classList.contains('hidden')) {\n                    return;\n                }\n\n                // The logic might be blocked because eg a form is there to prevent it.\n                if (element.dataset.blocked == 'true') {\n                    return;\n                }\n\n                switch (action) {\n                    case 'back':\n                        backToPreviousPage(optionid, userid);\n                    break;\n                    case 'continue':\n                    case 'continuepost':\n                        continueToNextPage(optionid, userid);\n                    break;\n                    case 'checkout':\n                        closeModal(optionid);\n                        window.location.href = element.dataset.href;\n                    break;\n                    case 'closemodal':\n                        reloadOnBookingView();\n                        closeModal(optionid);\n                    break;\n                    case 'closeinline':\n                        reloadOnBookingView();\n                        closeInline(optionid);\n\n                }\n            });\n        }\n    });\n}\n\n// /**\n//  *\n//  * @param {int} optionid\n//  */\n// async function initBookingButton(optionid) {\n\n//     // First, we get the right modal.\n//     let modal = document.querySelector('div.modal.show[id^=\"' + SELECTORS.MODALID + optionid + '_\"]');\n\n//     if (!modal) {\n\n//         // First, we get the right modal.\n//         const modals = document.querySelectorAll('div.inlineprepagearea [id^=\"' + SELECTORS.INLINEID + optionid + '_\"]');\n\n//         modals.forEach(el => {\n//             if (!isHidden(el)) {\n//                 modal = el;\n//             }\n//         });\n//         if (!modal) {\n//             return;\n//         }\n//     }\n\n//     modal.addEventListener('click', (e) => {\n\n//         let button = e.target;\n\n//         if (button) {\n\n//             const bookingButtonArea = e.target.closest(SELECTORS.BOOKITBUTTON);\n\n//             button = e.target.closest('.btn');\n\n//             if (bookingButtonArea && button) {\n\n//                 if ((bookingButtonArea.dataset.action == 'noforward')) {\n//                     return;\n//                 }\n\n//                 // There are several bugs caused by automatic forwarding, so we comment it out for now.\n//                 // We don't continue right away but wait for a second.\n//                 /* setTimeout(() => {\n//                     continueToNextPage(optionid);\n//                 }, WAITTIME);*/\n//             }\n//         }\n//     });\n// }\n\n/**\n *\n * @param {int} optionid\n * @param {bool} reloadTables\n */\nexport function closeModal(optionid, reloadTables = true) {\n    jQuery.each(jQuery('[id^=\"' + SELECTORS.MODALID + optionid + '_\"]'), async function() {\n\n        // We don't have a good way to check if the modal is ready to execute hide.\n        // So first we attach a listener to this modal to close it after show.\n\n        // It might be that the modal in question is not shown yet.\n        jQuery(this).on('shown.bs.modal', e => {\n\n            jQuery(e.currentTarget).off('shown.bs.modal');\n            // eslint-disable-next-line no-console\n            console.log('modal hide after shown', e);\n\n            jQuery(this).modal('hide');\n\n            if (reloadTables) {\n                reloadAllTables();\n            }\n        });\n\n        // Now we run hide anyways, just to be sure.\n        jQuery(this).modal('hide');\n\n        if (reloadTables) {\n            reloadAllTables();\n        }\n    });\n}\n\n/**\n *\n * @param {int} optionid\n * @param {bool} reloadTables\n */\nexport function closeInline(optionid, reloadTables = true) {\n    jQuery.each(jQuery('[id^=\"' + SELECTORS.INLINEID + optionid + '_\"]'), function() {\n\n        // We don't have a good way to check if the modal is ready to execute hide.\n        // So first we attach a listener to this modal to close it after show.\n\n        // It might be that the modal in question is not shown yet.\n        jQuery(this).on('shown.bs.collapse', e => {\n\n            jQuery(e.currentTarget).off('shown.bs.collapse');\n            // eslint-disable-next-line no-console\n            console.log('collapse hide after shown', e);\n\n            jQuery(this).collapse('toggle');\n\n            if (reloadTables) {\n                reloadAllTables();\n            }\n        });\n\n        // Now we run hide anyways, just to be sure.\n        jQuery(this).collapse('toggle');\n\n        if (reloadTables) {\n            reloadAllTables();\n        }\n    });\n}\n\n/**\n *\n * @param {int} optionid\n */\nfunction listenToCloseInline(optionid) {\n\n    jQuery.each(jQuery('[id^=\"' + SELECTORS.INLINEID + optionid + '_\"]'), function() {\n\n        jQuery(this).on('hide.bs.collapse', function() {\n\n            reloadAllTables();\n        });\n    });\n}\n\n/**\n * Reload on booking view\n *\n */\nfunction reloadOnBookingView() {\n    const onbookondetail = window.location.href.indexOf(\"optionview.php\");\n\n    if (onbookondetail >= 0) {\n        window.location.reload();\n    }\n}\n\n// /**\n//  * Function to check visibility of element.\n//  * @param {*} el\n//  * @returns {boolean}\n//  */\n// function isHidden(el) {\n//     var style = window.getComputedStyle(el);\n//     return ((style.display === 'none') || (style.visibility === 'hidden'));\n// }\n"],"names":["optionid","userid","shoppingcartisinstalled","console","log","elements","document","querySelectorAll","SELECTORS","length","each","this","on","forEach","async","element","dataset","initialized","action","then","cart","window","location","href","indexOf","reinit","catch","listenToCloseInline","addEventListener","classList","contains","blocked","closeModal","reloadOnBookingView","closeInline","reloadTables","e","currentTarget","off","modal","collapse","reload"],"mappings":"yUA0CkCA,SAAUC,OAAQC,yBAGhDC,QAAQC,IAAI,oBAAqBJ,cAI5BK,SAAWC,SAASC,iBAAiB,SAAWC,mBAAqBR,SAAW,OAASQ,wBAA0B,MAE/F,IAApBH,SAASI,SACTJ,SAAWC,SAASC,iBAAiB,SAAWC,kBAAoBR,SAAW,OAASQ,wBAA0B,sBAG5GE,MAAK,mBAAO,SAAWF,kBAAoBR,SAAW,QAAQ,+BAC1DW,MAAMC,GAAG,iBAAiB,6CACPZ,iBASlCG,QAAQC,IAAI,gBAAiBC,UAE7BA,SAASQ,SAAQC,MAAAA,aACTC,UAAYA,QAAQC,QAAQC,YAAa,CAGzCF,QAAQC,QAAQC,aAAc,QAExBC,OAASH,QAAQC,QAAQE,cAG/Bf,QAAQC,IAAIW,QAASG,QAIbA,YAEC,kBACA,mBACA,WAEDf,QAAQC,IAAI,cAAec,QACvBhB,opBAECiB,MAAKC,OAEFjB,QAAQC,IAAIgB,MAEMC,OAAOC,SAASC,KAAKC,QAAQ,eAE/B,EACZJ,KAAKK,QAAQ,GAEbL,KAAKK,YAIZC,OAAM,KAEHvB,QAAQC,IAAI,4DAuKXJ,0BAElBU,MAAK,mBAAO,SAAWF,mBAAqBR,SAAW,QAAQ,+BAE3DW,MAAMC,GAAG,oBAAoB,+CAxKxBe,GAKRZ,QAAQa,iBAAiB,SAAS,SAE1Bb,QAAQc,UAAUC,SAAS,WAKA,QAA3Bf,QAAQC,QAAQe,eAIZb,YACC,sCACkBlB,SAAUC,kBAE5B,eACA,8CACkBD,SAAUC,kBAE5B,WACD+B,WAAWhC,UACXqB,OAAOC,SAASC,KAAOR,QAAQC,QAAQO,eAEtC,aACDU,sBACAD,WAAWhC,oBAEV,cACDiC,sBACAC,YAAYlC,iOAtHhCQ,kBACS,kBADTA,mBAEU,mBAFVA,wBAIe,uCAiLHwB,WAAWhC,cAAUmC,wFAC1BzB,MAAK,mBAAO,SAAWF,kBAAoBR,SAAW,QAAQc,qCAM1DH,MAAMC,GAAG,kBAAkBwB,wBAEvBA,EAAEC,eAAeC,IAAI,kBAE5BnC,QAAQC,IAAI,yBAA0BgC,uBAE/BzB,MAAM4B,MAAM,QAEfJ,mEAMDxB,MAAM4B,MAAM,QAEfJ,wDAWID,YAAYlC,cAAUmC,wFAC3BzB,MAAK,mBAAO,SAAWF,mBAAqBR,SAAW,QAAQ,+BAM3DW,MAAMC,GAAG,qBAAqBwB,wBAE1BA,EAAEC,eAAeC,IAAI,qBAE5BnC,QAAQC,IAAI,4BAA6BgC,uBAElCzB,MAAM6B,SAAS,UAElBL,mEAMDxB,MAAM6B,SAAS,UAElBL,wDAyBHF,sBACkBZ,OAAOC,SAASC,KAAKC,QAAQ,mBAE9B,GAClBH,OAAOC,SAASmB"}