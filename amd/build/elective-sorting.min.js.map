{"version":3,"file":"elective-sorting.min.js","sources":["../src/elective-sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * WunderByte javascript library/framework\n *\n * @module mod_booking/wunderbyte\n * @copyright 2023 Georg Mai√üer <info@wunderbyte.at>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {WunderByteJS} from \"mod_booking/wunderbyte\";\n\nconst SELECTOR = {\n    CONFIRMBUTTON: '#confirmbutton',\n    SORTCONTAINER: 'ul#wb-sortabe',\n    SORTITEM: 'li.list-group-item',\n};\n\n/**\n * Elective sorting.\n */\nexport function electiveSorting() {\n    let options = {\n        items: SELECTOR.SORTITEM,\n        container: SELECTOR.SORTCONTAINER\n    };\n\n    let wunderbyteJS = new WunderByteJS();\n    wunderbyteJS.sortable(options);\n\n    // Add the change listener to the sortable items to update list link.\n    const confirmButton = document.querySelector(SELECTOR.CONFIRMBUTTON);\n    const sortContainer = document.querySelector(SELECTOR.SORTCONTAINER);\n\n    // Options for the observer (which mutations to observe)\n    const config = {attributes: true, childList: true, subtree: true};\n\n    // Callback function to execute when mutations are observed\n    const callback = (mutationList) => {\n    for (const mutation of mutationList) {\n        if (mutation.type === 'childList') {\n\n            let list = [];\n            document.querySelectorAll(SELECTOR.SORTITEM).forEach(element => {\n                list.push(parseInt(element.dataset.id));\n            });\n\n            confirmButton.dataset.list = JSON.stringify(list);\n        }\n    }\n    };\n\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n\n    // Start observing the target node for configured mutations\n    if (sortContainer) {\n        observer.observe(sortContainer, config);\n    }\n}"],"names":["options","items","SELECTOR","container","WunderByteJS","sortable","confirmButton","document","querySelector","sortContainer","config","attributes","childList","subtree","observer","MutationObserver","mutationList","mutation","type","list","querySelectorAll","forEach","element","push","parseInt","dataset","id","JSON","stringify","observe"],"mappings":"2MAmCQA,QAAU,CACVC,MAAOC,kBACPC,UAAWD,yBAGI,IAAIE,0BACVC,SAASL,eAGhBM,cAAgBC,SAASC,cAAcN,wBACvCO,cAAgBF,SAASC,cAAcN,wBAGvCQ,OAAS,CAACC,YAAY,EAAMC,WAAW,EAAMC,SAAS,GAkBtDC,SAAW,IAAIC,kBAfHC,mBACb,MAAMC,YAAYD,gBACG,cAAlBC,SAASC,KAAsB,KAE3BC,KAAO,GACXZ,SAASa,iBAAiBlB,mBAAmBmB,SAAQC,UACjDH,KAAKI,KAAKC,SAASF,QAAQG,QAAQC,QAGvCpB,cAAcmB,QAAQN,KAAOQ,KAAKC,UAAUT,UAShDV,eACAK,SAASe,QAAQpB,cAAeC;;;;;;;;MA7ClCR,uBACa,iBADbA,uBAEa,gBAFbA,kBAGQ"}